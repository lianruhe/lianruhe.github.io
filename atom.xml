<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shanks</title>
  
  <subtitle>Front-end developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lianruhe.github.io/"/>
  <updated>2018-03-29T02:10:07.000Z</updated>
  <id>https://lianruhe.github.io/</id>
  
  <author>
    <name>lianruhe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redux 的一些知识点</title>
    <link href="https://lianruhe.github.io/2018/03/15/redux/"/>
    <id>https://lianruhe.github.io/2018/03/15/redux/</id>
    <published>2018-03-15T06:37:51.000Z</published>
    <updated>2018-03-29T02:10:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redux-应用中数据的生命周期"><a href="#redux-应用中数据的生命周期" class="headerlink" title="redux 应用中数据的生命周期"></a>redux 应用中数据的生命周期</h2><ol><li>调用 store.dispatch(action)</li><li>store 调用传入的 reducer 函数</li><li>多个子 reducer 输出合并成一个单一的 state 树</li><li>store 保存根 reducer 返回的完整的 state 树</li></ol><h2 id="redux-的一些中间件"><a href="#redux-的一些中间件" class="headerlink" title="redux 的一些中间件"></a>redux 的一些中间件</h2><h3 id="redux-thunk-（异步-action-创建函数）"><a href="#redux-thunk-（异步-action-创建函数）" class="headerlink" title="redux-thunk （异步 action 创建函数）"></a>redux-thunk （异步 action 创建函数）</h3><p>使用了这个 middleware，action 创建函数除了返回 action 对象外还可以返回函数。当返回函数就会被 redux-thunk middleware 执行。这个函数可以 dispatch action，在任何时候，因此是异步 action 创建函数。</p><h3 id="redux-promise-promise-来代替创建函数"><a href="#redux-promise-promise-来代替创建函数" class="headerlink" title="redux-promise (promise 来代替创建函数)"></a>redux-promise (promise 来代替创建函数)</h3><p>这个 middleware 是用 promise 对象来代替 action 创建函数，即可以直接 dispatch promise 对象。</p><h3 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a>redux-saga</h3><p>在组件中触发 action，从而触发另外一些 action 去获取数据，用的是 generator 函数。</p><p>effect 根节点的子任务，effect 往往由一个 redux-saga 的 effect 函数加上一个 promise 函数组合而成，redux-saga 的 effect 函数控制具体开启任务的方式，而 promise 中承载着具体的任务的具体实现<br>select 和 getState 作用相同<br>take 当前的 generator 会停止，等待一个满足 take 能够匹配上的 action 的时候才会进行下去<br>put 将数据 output 到 store，相当于 redux 的 store.dispatch<br>call 执行一个 promise 或者一个 saga<br>fork 同 call 一样去执行但是不阻碍当前任务队列<br>takeEvery 当匹配到 action 的时候，执行一个 saga<br>takeLatest 当匹配到 action 的时候，取消上个同 action 的 saga 并执行一个新的 saga</p><h3 id="redux-actions"><a href="#redux-actions" class="headerlink" title="redux-actions"></a>redux-actions</h3><p>createAction[s] 创建 action 创建函数的语法糖；<br>handleAction[s] 创建 reducer 的语法糖；<br>和 redux-promise 联用效果很好。</p><h2 id="自己实践"><a href="#自己实践" class="headerlink" title="自己实践"></a>自己实践</h2><p>通过 redux-actions 的 createAction[s] 创建 action 创建函数，搭配 redux-thunk 和 redux-promise 返回请求的 promise ，去获取请求；而且在关联到组件中时利用 redux 的 bindActionCreator[s] 不暴漏 dispatch 函数给组件，调用函数的方式去触发 action，整个过程类似单线程，容易理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;redux-应用中数据的生命周期&quot;&gt;&lt;a href=&quot;#redux-应用中数据的生命周期&quot; class=&quot;headerlink&quot; title=&quot;redux 应用中数据的生命周期&quot;&gt;&lt;/a&gt;redux 应用中数据的生命周期&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;调用 store
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://lianruhe.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="redux" scheme="https://lianruhe.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://lianruhe.github.io/2018/03/12/webpack/"/>
    <id>https://lianruhe.github.io/2018/03/12/webpack/</id>
    <published>2018-03-12T09:10:01.000Z</published>
    <updated>2018-03-14T07:58:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-模块化（CommonJS-模块）"><a href="#webpack-模块化（CommonJS-模块）" class="headerlink" title="webpack 模块化（CommonJS 模块）"></a>webpack 模块化（CommonJS 模块）</h2><p>文章参考：<a href="https://www.jianshu.com/p/e24ed38d89fd" target="_blank" rel="noopener">webpack 打包原理</a></p><p>webpack 只是一个打包模块的机制，只是把依赖的模块转化成可以代表这些包的静态文件。并不是什么 commonjs 或者 amd 之类的模块化规范。webpack 就是识别你的入口文件，识别你的模块依赖，来打包你的代码。至于你的代码使用的是 commonjs 还是 amd 或者 es6 的 import，webpack都会对其进行分析，来获取代码的依赖。所以 webpack 做的就是分析代码，转换代码，编译代码，输出代码。webpack本身是一个node的模块，所以webpack.config.js是以 commonjs 形式书写的(node 中的模块化是 commonjs 规范的)。</p><p>我们用个简单的模块化的例子来看一下，webpack 打包后的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">var</span> moduleTest = <span class="built_in">require</span>(<span class="string">'./test.js'</span>);</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'index.js'</span>);</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="built_in">module</span>.fn1();</div><div class="line"><span class="built_in">module</span>.fn2();</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// test.js</span></div><div class="line">exports.fn1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>)</div><div class="line">&#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line">exports.fn2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>)</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>打包后的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bundle.js</span></div><div class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></div><div class="line"><span class="comment">/******/</span>    <span class="comment">// The module cache</span></div><div class="line"><span class="comment">/******/</span>    <span class="keyword">var</span> installedModules = &#123;&#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span>    <span class="comment">// The require function</span></div><div class="line"><span class="comment">/******/</span>    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span>        <span class="comment">// Check if module is in cache</span></div><div class="line"><span class="comment">/******/</span>        <span class="keyword">if</span>(installedModules[moduleId])</div><div class="line"><span class="comment">/******/</span>            <span class="keyword">return</span> installedModules[moduleId].exports;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span>        <span class="comment">// Create a new module (and put it into the cache)</span></div><div class="line"><span class="comment">/******/</span>        <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</div><div class="line"><span class="comment">/******/</span>            exports: &#123;&#125;,</div><div class="line"><span class="comment">/******/</span>            id: moduleId,</div><div class="line"><span class="comment">/******/</span>            loaded: <span class="literal">false</span></div><div class="line"><span class="comment">/******/</span>        &#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span>        <span class="comment">// Execute the module function</span></div><div class="line"><span class="comment">/******/</span>        modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span>        <span class="comment">// Flag the module as loaded</span></div><div class="line"><span class="comment">/******/</span>        <span class="built_in">module</span>.loaded = <span class="literal">true</span>;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span>        <span class="comment">// Return the exports of the module</span></div><div class="line"><span class="comment">/******/</span>        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</div><div class="line"><span class="comment">/******/</span>    &#125;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span>    <span class="comment">// expose the modules object (__webpack_modules__)</span></div><div class="line"><span class="comment">/******/</span>    __webpack_require__.m = modules;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span>    <span class="comment">// expose the module cache</span></div><div class="line"><span class="comment">/******/</span>    __webpack_require__.c = installedModules;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span>    <span class="comment">// __webpack_public_path__</span></div><div class="line"><span class="comment">/******/</span>    __webpack_require__.p = <span class="string">""</span>;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span>    <span class="comment">// Load entry module and return exports</span></div><div class="line"><span class="comment">/******/</span>    <span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</div><div class="line"><span class="comment">/******/</span> &#125;)</div><div class="line"><span class="comment">/************************************************************************/</span></div><div class="line"><span class="comment">/******/</span> ([</div><div class="line"><span class="comment">/* 0 */</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</div><div class="line"><span class="comment">/******/</span></div><div class="line">        <span class="keyword">var</span> moduleTest = __webpack_require__(<span class="number">1</span>);</div><div class="line"><span class="comment">/******/</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'index.js'</span>);</div><div class="line"><span class="comment">/******/</span></div><div class="line">        moduleTest.fn1();</div><div class="line">        moduleTest.fn2()</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/***/</span> &#125;,</div><div class="line"><span class="comment">/* 1 */</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</div><div class="line"><span class="comment">/******/</span></div><div class="line">        exports.fn1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'fn1'</span>)</div><div class="line">        &#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line">        exports.fn2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'fn2'</span>)</div><div class="line">        &#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/***/</span> &#125;</div><div class="line"><span class="comment">/**/</span> ]);</div></pre></td></tr></table></figure></p><p>可以看到，整个打包生成的代码是一个IIFE（立即执行函数）,做了如下一些事情：</p><ol><li>IIFE首先定义了installedModules ，这个变量被用来缓存已加载的模块。</li><li>定义了<strong>webpack_require</strong> 这个函数，函数参数为模块的id。这个函数用来实现模块的require。</li><li><strong>webpack_require</strong> 函数首先会检查是否缓存了已加载的模块，如果有则直接返回缓存模块的exports。</li><li>如果没有缓存，也就是第一次加载，则首先初始化模块，并将模块进行缓存。</li><li>然后调用模块函数，也就是前面webpack对我们的模块的包装函数，将module、module.exports和<strong>webpack_require</strong>作为参数传入。注意这里做了一个动态绑定，将模块函数的调用对象绑定为module.exports，这是为了保证在模块中的this指向当前模块。</li><li>调用完成后，模块标记为已加载。</li><li>返回模块exports的内容。</li><li>利用前面定义的<strong>webpack_require</strong> 函数，require第0个模块，也就是入口模块</li></ol><p>webpack传入的第一个参数module是当前缓存的模块，包含当前模块的信息和exports；第二个参数exports是module.exports的引用，这也符合commonjs的规范；第三个<strong>webpack_require</strong> 则是require的实现。</p><p><strong>原理还是很简单的，其实就是实现exports和require，然后自动加载入口模块，控制缓存模块，that’s all。</strong></p><h2 id="webpack-模块化（ES模块）"><a href="#webpack-模块化（ES模块）" class="headerlink" title="webpack 模块化（ES模块）"></a>webpack 模块化（ES模块）</h2><p>还是用一个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">import</span> bar, &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./module.js'</span>;</div><div class="line">bar();</div><div class="line">foo();</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>模块打包后的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line">([</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</div><div class="line">      <span class="comment">/******/</span></div><div class="line">      <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</div><div class="line">      <span class="comment">/* harmony import */</span></div><div class="line">      <span class="keyword">var</span> __WEBPACK_IMPORTED_MODULE_0__m__ = __webpack_require__(<span class="number">1</span>);</div><div class="line">      <span class="comment">/******/</span></div><div class="line">      <span class="built_in">Object</span>(__WEBPACK_IMPORTED_MODULE_0__m__[<span class="string">"a"</span> <span class="comment">/* default */</span>])();</div><div class="line">      <span class="built_in">Object</span>(__WEBPACK_IMPORTED_MODULE_0__m__[<span class="string">"b"</span> <span class="comment">/* foo */</span>])();</div><div class="line">      <span class="comment">/******/</span></div><div class="line">  &#125;),</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</div><div class="line">      <span class="comment">/******/</span></div><div class="line">      <span class="comment">/* harmony export (immutable) */</span></div><div class="line">      exports[<span class="string">"a"</span>] = bar;</div><div class="line">      <span class="comment">/* harmony export (immutable) */</span></div><div class="line">      exports[<span class="string">"b"</span>] = foo;</div><div class="line">      <span class="comment">/******/</span></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">      &#125;;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">/******/</span></div><div class="line">  &#125;)</div><div class="line">]);</div></pre></td></tr></table></figure><p>index模块首先通过Object.defineProperty在<strong>webpack_exports</strong>上添加属性__esModule ，值为true，表明这是一个es模块。在目前的代码下，这个标记是没有作用的，至于在什么情况下需要判断模块是否es模块，后面会分析。</p><p>然后就是通过<strong>webpack_require</strong>(1)导入m.js模块，再然后通过module.xxx获取m.js中export的对应属性。注意这里有一个重要的点，就是所有引入的模块属性都会用Object()包装成对象，这是为了保证像Boolean、String、Number这些基本数据类型转换成相应的类型对象。</p><p><strong>webpack对于es模块的实现，也是基于自己实现的<strong>webpack_require</strong> 和 <strong>webpack_exports</strong> ，装换成类似于 commonjs 的形式。对于 es 模块和 commonjs 混用的情况，则需要通过 <strong>webpack_require</strong>.n 的形式做一层包装来实现。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack-模块化（CommonJS-模块）&quot;&gt;&lt;a href=&quot;#webpack-模块化（CommonJS-模块）&quot; class=&quot;headerlink&quot; title=&quot;webpack 模块化（CommonJS 模块）&quot;&gt;&lt;/a&gt;webpack 模块化（Co
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://lianruhe.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="webpack" scheme="https://lianruhe.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>questions</title>
    <link href="https://lianruhe.github.io/2018/02/23/questions/"/>
    <id>https://lianruhe.github.io/2018/02/23/questions/</id>
    <published>2018-02-23T08:55:31.000Z</published>
    <updated>2018-03-21T07:13:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>总结一些前端方面的知识点</p><h1 id="node-相关"><a href="#node-相关" class="headerlink" title="node 相关"></a>node 相关</h1><h2 id="require的原理及执行过程"><a href="#require的原理及执行过程" class="headerlink" title="require的原理及执行过程"></a>require的原理及执行过程</h2><blockquote><p>首先从缓存中读取，没有的话需要加载文件；根据参数来确定文件路径（传入的是绝对路径还是相对路径，路径格式，是／还是文件名结尾，是否需要加 index.js 等）；然后就是加载文件，不同格式要用不同的解析，如：js 要进行编译，json要用 JSON.parse 解析等；加载 js 文件是在 js 文件用函数包装，传入 exports，require 等参数；</p></blockquote><h2 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h2><blockquote><p>OSI（Open System Interconnection）开放系统互连参考模型，是ISO制定的一个用于计算机或通信系统间互联的标准体系，它是一个七层抽象模型，从低到高分别是：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。目的是为不同计算机互连提供一个共同的基础和标准框架，OSI中包括一系列抽象的术语、概念，也包括具体的协议，遵循OSI参考模型和相关协议能够实现计算机或通信系统间互联互通。</p></blockquote><h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><ul><li>CommonJS API 定义很多普通应用程序（主要指非浏览器的应用）使用的 API，从而填补了这个空白。它的终极目标是提供一个类似 Python，Ruby 和 Java 标准库。这样的话，开发者可以使用 CommonJS API 编写应用程序，然后这些应用可以运行在不同的 JavaScript 解释器和不同的主机环境中。NodeJS是CommonJS规范的实现。CommonJS 定义的模块分为: <strong>{模块引用(require)} {模块定义(exports)} {模块标识(module)}</strong>,所以浏览器是跑不了commonjs 的，因为没有这几个变量。。</li><li>AMD 解决在浏览器也可以适用的模块化解决方案，而且还有一个问题是 commonjs 加载模块是同步的，在浏览器运行时需要等待加载资源，因此造成假死的情况，因此异步加载的浏览器端模块化解决方案就诞生了。AMD 是 “Asynchronous Module Definition” 的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行（require([module], callback)需要2个参数，依赖的模块数组，加载完成回调函数）。AMD 模块必须采用特定的 define(function(){}) 函数,如果此模块依赖其它模块define函数还要传入一个依赖的模块数组参数；</li><li>CMD 和 AMD 类似也是异步模块化的解决方案，一样是并行加载所有依赖的模块, 但不会立即执行模块, 等到真正需要(require)的时候才开始解析，不容易造成顺序依赖的问题。</li></ul><h1 id="框架相关"><a href="#框架相关" class="headerlink" title="框架相关"></a>框架相关</h1><h2 id="react-生命周期"><a href="#react-生命周期" class="headerlink" title="react 生命周期"></a>react 生命周期</h2><blockquote><p>实例化</p><ul><li>getDefaultProps</li><li>getInitialState</li><li>componentWillMount</li><li>render</li><li>componentDidMount<br>存在期</li><li>componentWillReceiveProps</li><li>shouldComponentUpdate</li><li>componentWillUpdate</li><li>render</li><li>componentDidUpdate<br>销毁期</li><li>componentWillUnmount</li></ul></blockquote><h2 id="vue-生命周期"><a href="#vue-生命周期" class="headerlink" title="vue 生命周期"></a>vue 生命周期</h2><blockquote><p>create -&gt; mount -&gt; update(绑定的数据或传入的属性改变) -&gt; destory</p><ul><li>beforeCreate<br>observe data<br>init event</li><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>beforeDestory</li><li>destoryed</li></ul></blockquote><h2 id="为什么使用-react"><a href="#为什么使用-react" class="headerlink" title="为什么使用 react"></a>为什么使用 react</h2><ul><li>由于virtual DOM的存在，使得平台兼容性强，后续公司可基于该方案落地RN到客户端研发；</li><li>React是一个生态圈健壮的以解决组件化开发为目标的前端框架，文档全面；</li><li>React支持服务端同构渲染（虽说Vue也支持吧），方便后续做基于SSR的RTT优化。</li></ul><h2 id="什么时候使用-redux"><a href="#什么时候使用-redux" class="headerlink" title="什么时候使用 redux"></a>什么时候使用 redux</h2><p>遵循了 flux 架构的思想（store =&gt; view =&gt; dispatch(action) =&gt; store =&gt; …）</p><blockquote><p>Redux 单一数据集合以及绑定策略节省了大量的前端代码，并且对数据进行集中维护。结合单向数据流的概念，强迫组件更加纯粹。</p></blockquote><ul><li>数据集合较庞大、数据关联性较强</li><li>业务流程较复杂</li><li>绝大多数子业务可被抽象为复用的视图或者组件</li></ul><p>总结：如果这个状态不影响其他部分的业务逻辑并且足够简单，就使用 react state。</p><h1 id="js-相关"><a href="#js-相关" class="headerlink" title="js 相关"></a>js 相关</h1><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>闭包就是当函数在其它地方使用的时候能保存下函数所需要的运行环境（一些局部变量），也即是函数能保存下函数诞生时的环境。可以理解为：<strong>函数运行在它们被定义的作用域里，而不是它们被执行的作用域里。</strong></p></blockquote><h2 id="为什么需要闭包"><a href="#为什么需要闭包" class="headerlink" title="为什么需要闭包"></a>为什么需要闭包</h2><blockquote><p>局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染。</p></blockquote><h2 id="如何使用闭包？"><a href="#如何使用闭包？" class="headerlink" title="如何使用闭包？"></a>如何使用闭包？</h2><ol><li>定义外层函数，封装被保护的局部变量；</li><li>定义内层函数，执行对外部函数变量的操作；</li><li>外层函数返回内层函数的对象，并且外层函数被调用，结果保存在一个全局的变量中。</li></ol><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><blockquote><p>一个函数就接收另一个函数作为参数，这种函数就称之为高阶函数。常见的高阶函数： map／reduce; filter; sort</p></blockquote><h2 id="数组操作方法有哪些"><a href="#数组操作方法有哪些" class="headerlink" title="数组操作方法有哪些"></a>数组操作方法有哪些</h2><blockquote><p>push,pop,shift,unshift,reverse,splice, join,concat,indexOf,sort,slice,filter,map,forEach,some,every</p></blockquote><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><blockquote><p>1.遍历数组法；2.对象键值法；3.数组下标法；4.排序相邻去除法</p></blockquote><h2 id="session-和-cookie"><a href="#session-和-cookie" class="headerlink" title="session 和 cookie"></a>session 和 cookie</h2><blockquote><p>Session 是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；<br>Cookie 是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现 Session 的一种方式。用来服务端识别特定的客户；默认浏览器关闭失效；</p></blockquote><h2 id="LocalStorage-和-sessionStorage"><a href="#LocalStorage-和-sessionStorage" class="headerlink" title="LocalStorage 和 sessionStorage"></a>LocalStorage 和 sessionStorage</h2><blockquote><p>都是 web Storage，HTML5 引入的一个重要的功能，在前端开发的过程中会经常用到，它可以在客户端本地存储数据，类似cookie，但其功能却比cookie强大的多。cookie的大小只有4Kb左右（浏览器不同，大小也不同），而web Storage的大小有5MB；<br>localStorage 的生命周期是永久性的。假若使用localStorage存储数据，即使关闭浏览器，也不会让数据消失，除非主动的去删除数据；<br>sessionStorage 的生命周期是在浏览器关闭前。也就是说，在整个浏览器未关闭前，其数据一直都是存在的。</p></blockquote><h2 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call, apply, bind"></a>call, apply, bind</h2><blockquote><p>都是改变调用的函数中的 this；区别：fn.call(that, a, b,…) fn.apply(that, arguments)参数不相同，apply是以数组的形式传入，call是一个一个传入，两者都是立即执行函数，而 bind 是返回修改 this 完成后的函数，需要再去执行。</p></blockquote><h2 id="ES6-主要的新特性"><a href="#ES6-主要的新特性" class="headerlink" title="ES6 主要的新特性"></a>ES6 主要的新特性</h2><ul><li>Block-Scoped Constructs Let and Const（块作用域构造Let and Const）</li><li>Destructuring Assignment （解构赋值）</li><li>Multi-line Strings （多行字符串）</li><li>Template Literals （模板文本）</li><li>Arrow Functions （箭头函数）in ES6</li><li>Default Parameters（默认参数）</li><li>Promise</li><li>Classes（类）</li><li>Enhanced Object Literals （增强的对象文本 Object.create）</li><li>Modules（模块）</li></ul><h2 id="一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h2><blockquote><p>分为4个步骤：</p><ol><li>当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个 DNS 查询。这能使浏览器获得请求对应的 IP 地址。</li><li>浏览器与远程 Web 服务器通过 TCP 三次握手协商来建立一个 TCP/IP 连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。</li><li>一旦 TCP/IP 连接建立，浏览器会通过该连接向远程服务器发送 HTTP 的 GET 请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。</li><li>此时，Web 服务器提供资源服务，客户端开始下载资源。</li></ol></blockquote><p>请求返回后，便进入了我们关注的前端模块<br>简单来说，浏览器会解析 HTML 生成 DOM Tree，其次会根据 CSS 生成 CSS Rule Tree，而 javascript 又可以根据 DOM API 操作 DOM</p><h1 id="css-相关"><a href="#css-相关" class="headerlink" title="css 相关"></a>css 相关</h1><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><blockquote><p>块级格式化上下文，它是指一个独立的块级渲染区域，只有Block-level BOX参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与区域外部无关。<br>满足下列 CSS 声明之一的元素便会生成 BFC</p><ul><li>根元素</li><li>float的值不为none</li><li>overflow的值不为visible</li><li>display的值为inline-block、table-cell、table-caption</li><li>position的值为absolute或fixed</li></ul></blockquote><h2 id="垂直水平居中布局"><a href="#垂直水平居中布局" class="headerlink" title="垂直水平居中布局"></a>垂直水平居中布局</h2><ul><li>使用绝对定位和负外边距对块级元素进行垂直居中</li><li>使用绝对定位和transform（transform: translate(-50%, -50%);）</li><li>flex 弹性布局（justify-content: center;align-items: center;）</li></ul><h2 id="浮动引起的问题？什么时候要清除浮动？如何清除浮动"><a href="#浮动引起的问题？什么时候要清除浮动？如何清除浮动" class="headerlink" title="浮动引起的问题？什么时候要清除浮动？如何清除浮动"></a>浮动引起的问题？什么时候要清除浮动？如何清除浮动</h2><blockquote><p>父元素坍塌；</p><ul><li>在父元素的最后加一个冗余元素并为其设置clear:both</li><li>采用伪元素，这里我们使用:after。添加一个类 clearfix</li><li>给父元素添加overflow:hidden || auto</li></ul></blockquote><h2 id="元素不可见，且不可点击"><a href="#元素不可见，且不可点击" class="headerlink" title="元素不可见，且不可点击"></a>元素不可见，且不可点击</h2><ul><li>display: none;</li><li>height: 0; overflow: hidden;</li><li>position: absolute; top: -999em;</li><li>position: absolute; visibility: hidden;</li><li>position: absolute; zoom: 0.001;</li></ul><h2 id="css-样式权重如何计算"><a href="#css-样式权重如何计算" class="headerlink" title="css 样式权重如何计算"></a>css 样式权重如何计算</h2><ul><li>根据样式所在位置，对元素的影响也有关系：内联样式（标签内style形式） &gt; style标签 &gt; link标签</li><li>根据选择器的类型，id选择器 &gt; 类，属性选择器和伪类选择器 &gt; 元素和伪元素<br>一般来说我们的计算方式为，从0开始，一个行内样式+1000，一个id+100，一个属性选择器/class或者伪类+10，一个元素名，或者伪元素+1</li></ul><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><ol><li>减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</li><li>前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</li><li>用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</li><li>当需要设置的样式很多时设置className而不是直接操作style。</li><li>少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</li><li>避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</li><li>图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳。</li><li>避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示div+css布局慢.<br>对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。</li></ol><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="pull-与-fetch"><a href="#pull-与-fetch" class="headerlink" title="pull 与 fetch"></a>pull 与 fetch</h2><blockquote><p>git pull相比git fetch相当于是从远程获取最新版本到本地，但不会自动merge。git pull = git fetch + git merge</p></blockquote><h2 id="rebase-与-merge"><a href="#rebase-与-merge" class="headerlink" title="rebase 与 merge"></a>rebase 与 merge</h2><blockquote><p> 两者都是合并分支时使用；rebase 根据这个单词的意思可以看出，就是改变当前分支的基础，就是说改变这个分支最初分出来的那个点，移动到更新的节点上，达到其它分支合并到当前分支的作用； merge 很简单的两个分支合并，把两个分支合并解决冲突作为一次提交到新的分支上，相比rebase 多了一次合并提交的节点；<br>使用上，其它分支 merge 到主分支，其它分支 rebase 主分支！</p></blockquote><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><blockquote><p>XSS 攻击 是Web攻击中最常见的攻击方法之一，它是通过对网页注入可执行代码且成功地被浏览器执行，达到攻击的目的，形成了一次有效 XSS 攻击，一旦攻击成功，它可以获取用户的联系人列表，然后向联系人发送虚假诈骗信息，可以删除用户的日志等等，有时候还和其他攻击方式同时实施比如 SQL 注入攻击服务器和数据库、Click劫持、相对链接劫持等实施钓鱼，它带来的危害是巨大的，是web安全的头号大敌。</p></blockquote><p>实施XSS攻击需要具备两个条件：</p><ol><li>需要向 web 页面注入恶意代码；</li><li>这些恶意代码能够被浏览器成功的执行。</li></ol><p>防范：对用户输入内容的一些特殊字符进行转义；严格控制用户输入非法内容；如：&lt;&gt;””‘’%;()&amp;+等</p><h2 id="sql-注入"><a href="#sql-注入" class="headerlink" title="sql 注入"></a>sql 注入</h2><blockquote><p>SQL Injection 就是通过把恶意的 SQL 命令插入到 Web 表单让服务器执行，最终达到欺骗服务器或数据库执行恶意的 SQL 命令.</p></blockquote><p>防范：对用户提交内容特殊字符进行转义，如：单引号，双横杠等</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><blockquote><p>CSRF跨站点请求伪造(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性，你可以这样来理解：<br> 攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。</p></blockquote><p> CSRF攻击攻击原理及过程如下(其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户)：</p><ol><li>用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</li><li>在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</li><li>用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；</li><li>网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</li><li>浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</li></ol><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p> 稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；<br> 不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；</p><p> 内排序：所有排序操作都在内存中完成；<br> 外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</p><p> 时间复杂度: 一个算法执行所耗费的时间。<br> 空间复杂度: 运行完一个程序所需内存的大小</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li>冒泡排序 O(n^2) 稳定 ： 相邻元素比较，每次找出最大或最小，然后逆向比较。</li><li>选择排序 O(n^2) 不稳定 ： 找出最小的放在第一个，第二次找出剩下最小的放在第二。。。</li><li>插入排序 O(n^2) 稳定 ： 从头开始后面的往前面插入合适的位置，比如起牌的过程。</li><li>希尔排序 O(nlog n) 不稳定 ： 每次间隔一定的增量进行插入排序，增量依次缩小，直至为1</li><li>归并排序 O(nlog n) 稳定 ： 分治法，分段进行选择排序，然后插入排序归并各个段</li><li>快速排序 O(log n) 不稳定 ： 找个哨兵元素，然后一个指针从前向后和哨兵比较，大于它停止，一个从后向前小于等于它停止，然后交换两个指针下元素，然后两个指针继续，知道两者相遇，交换哨兵和当前元素，一次排序结束，结果是哨兵左边小于等于它，右边大于它。然后两边分别重复前面的操作。。直到个数为1。</li></ul><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul><li>二分查找 O(log2 n) 排序已经好的队列，和中间元素比较，大于向后队列查找，否则向前队列重复二分查找</li><li>二叉排序树查找 O(log2 n) 和二分查找类似</li><li>哈希（散列）表法 通过散列函数，定位元素，几乎是 O(1)</li><li>分块查找 块内可以无顺序，块之间有序，先确定在哪个快，然后顺序查找</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总结一些前端方面的知识点&lt;/p&gt;
&lt;h1 id=&quot;node-相关&quot;&gt;&lt;a href=&quot;#node-相关&quot; class=&quot;headerlink&quot; title=&quot;node 相关&quot;&gt;&lt;/a&gt;node 相关&lt;/h1&gt;&lt;h2 id=&quot;require的原理及执行过程&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://lianruhe.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端问题" scheme="https://lianruhe.github.io/tags/%E5%89%8D%E7%AB%AF%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>wechat</title>
    <link href="https://lianruhe.github.io/2017/12/18/wechat/"/>
    <id>https://lianruhe.github.io/2017/12/18/wechat/</id>
    <published>2017-12-18T07:37:27.000Z</published>
    <updated>2017-12-18T09:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序-开发学习记录"><a href="#微信小程序-开发学习记录" class="headerlink" title="微信小程序 开发学习记录"></a>微信小程序 开发学习记录</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>根据微信公众平台 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html" target="_blank" rel="noopener">简易教程</a> 一步一步来，申请账号，安装 IDE，编译之后就可以看到你的第一个微信小程序了。<br>好吧，又是 Hello Word！<br>那么恭喜你！你已经成功创建了你的第一个小程序，点击预览按钮，通过微信的扫一扫在手机上体验你的第一个小程序。</p><h2 id="小程序的文件结构"><a href="#小程序的文件结构" class="headerlink" title="小程序的文件结构"></a>小程序的文件结构</h2><p>小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。根目录下面有三个文件 app.js(入口文件)，app.json(公共配置文件)，app.wxss(全局样式)。</p><p>一个小程序页面由四个文件组成：<br>1.json 配置文件<br>2.wxml 模版文件<br>3.wxss 样式文件<br>4.js 代码文件<br><strong>注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。</strong></p><h3 id="JSON-配置文件"><a href="#JSON-配置文件" class="headerlink" title="JSON 配置文件"></a>JSON 配置文件</h3><p>app.json 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。<br>其它的配置项可以参考配置 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html" target="_blank" rel="noopener">app.json</a>。</p><h3 id="WXML-模版"><a href="#WXML-模版" class="headerlink" title="WXML 模版"></a>WXML 模版</h3><p>就是 HTML, 不同的是标签是 wechat 自定义的。例如：view, button, text 等等。多了 wx:if 等这样的属性，如果你用过 vue 的类似属性，那么很好理解，这里不便多说。具体文档可以看这里 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/" target="_blank" rel="noopener">WXML</a>。</p><h3 id="WXSS-样式"><a href="#WXSS-样式" class="headerlink" title="WXSS 样式"></a>WXSS 样式</h3><p>好吧，这是 CSS！不过多了一些扩充和修改。<br>1.新增尺寸单位 rpx，不同的宽度和设备像素比，会自动换算，免去开发者的烦恼。<br>2.作用域的不同。app.wxss 作用于全局，其它在页面下面的 page.wxss 仅对当前页面生效。<br>3.wxss 仅支持部分 css 选择器。使用的时候要当心噢！<br>具体配置可以参考配置 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxss.html" target="_blank" rel="noopener">WXSS</a>。</p><h3 id="JS-逻辑代码"><a href="#JS-逻辑代码" class="headerlink" title="JS 逻辑代码"></a>JS 逻辑代码</h3><p>HTML 是页面的表现，那么操作就是 js 来完成，例如点击一个按钮应该有什么动作：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"clickMe"</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p><p>button 上声明一个属性 bindtap 顾名思义是绑定了一个 tap 动作的事件，所以在 js 文件中就要声明 clickMe 这个方法来响应。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">  clickMe: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setData(&#123; <span class="attr">msg</span>: <span class="string">"Hello World"</span> &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>响应用户的操作就是这么简单，更详细的事件可以参考文档 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">WXML - 事件</a> 。</p><h2 id="程序执行的流程"><a href="#程序执行的流程" class="headerlink" title="程序执行的流程"></a>程序执行的流程</h2><p>微信客户端在打开小程序之前会线加载相关的代码文件，可以理解为下载 html 和 js 等相关资源文件，不过这里解析不一样啦！<br>1.解析 app.json 全局配置，相关页面路径等<br>2.资源加载完成开始渲染页面和执行逻辑文件，首先就是 app.js 文件<br>3.每个程序都会有个 index page 文件夹，这也就是你的小程序的 home 页面，所以之后就是执行这里面的内容</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信小程序-开发学习记录&quot;&gt;&lt;a href=&quot;#微信小程序-开发学习记录&quot; class=&quot;headerlink&quot; title=&quot;微信小程序 开发学习记录&quot;&gt;&lt;/a&gt;微信小程序 开发学习记录&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://lianruhe.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="WeChat" scheme="https://lianruhe.github.io/tags/WeChat/"/>
    
  </entry>
  
  <entry>
    <title>Postcss 常用的语法总结 (wip...)</title>
    <link href="https://lianruhe.github.io/2017/11/06/postcss/"/>
    <id>https://lianruhe.github.io/2017/11/06/postcss/</id>
    <published>2017-11-06T03:42:07.000Z</published>
    <updated>2018-02-23T02:36:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.w3cplus.com/preprocessor/sass-to-postcss.html" target="_blank" rel="noopener">参考文献</a></p><h2 id="1-自定义属性"><a href="#1-自定义属性" class="headerlink" title="1.自定义属性"></a>1.自定义属性</h2><p>postcss 自定义属性仅适用于属性值，他们不能被用于选择器，属性名称或媒体查询。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span> &#123;</div><div class="line">  <span class="attribute">--white</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">--grey</span>: <span class="number">#1e1e1d</span>;</div><div class="line">  <span class="attribute">--yellow</span>: <span class="number">#ffad15</span>;</div><div class="line">  <span class="attribute">--offwhite</span>: <span class="number">#f8f8f8</span>;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/************/</span></div><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--yellow);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-颜色函数"><a href="#2-颜色函数" class="headerlink" title="2.颜色函数"></a>2.颜色函数</h2><p>color, shade, alpha</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">color</span>: <span class="selector-tag">color</span>(<span class="selector-id">#f6f6f6</span> <span class="selector-tag">shade</span>(20%));</div><div class="line"><span class="selector-tag">color</span>: <span class="selector-tag">color</span>(<span class="selector-id">#f6f6f6</span> <span class="selector-tag">shade</span>(20%) <span class="selector-tag">alpha</span>(40%));</div></pre></td></tr></table></figure><h2 id="3-类占位符"><a href="#3-类占位符" class="headerlink" title="3.类占位符"></a>3.类占位符</h2><p>@apply 允许你在选择器中引用一组已存储样式。我将使用 @apply 规则来替代 Sass 中的 ( %placeholder @extend )。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span> &#123;</div><div class="line">  ...</div><div class="line">  <span class="selector-tag">--franklin</span>: &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">'futura-pt'</span>,</div><div class="line">    helvetica, sans-serif;</div><div class="line">  &#125;;</div><div class="line">  <span class="selector-tag">--franklin-heading</span>: &#123;</div><div class="line">    @apply --franklin;</div><div class="line">    <span class="selector-tag">font-weight</span>: 700;</div><div class="line">    <span class="selector-tag">line-height</span>: 1<span class="selector-class">.1</span>;</div><div class="line">    <span class="selector-tag">text-transform</span>: <span class="selector-tag">uppercase</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/************/</span></div><div class="line"><span class="selector-class">.my-heading</span> &#123;</div><div class="line">  @apply --franklin-heading;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-混合宏"><a href="#4-混合宏" class="headerlink" title="4.混合宏"></a>4.混合宏</h2><p>在 Sass 中经常使用到混合宏(@mixin @include)，可以简写样式代码。但是在 postcss 中没有类似的功能，因为我觉得可以用 css 自身的类名去实现，没有必要做深层的嵌套，一层嵌套用类占位符就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.w3cplus.com/preprocessor/sass-to-postcss.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文献&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-自定义属性&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://lianruhe.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="postcss" scheme="https://lianruhe.github.io/tags/postcss/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="https://lianruhe.github.io/2017/11/01/hexo-config/"/>
    <id>https://lianruhe.github.io/2017/11/01/hexo-config/</id>
    <published>2017-11-01T08:53:58.000Z</published>
    <updated>2017-11-03T03:01:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo docs</a><br><a href="https://hexo.io/zh-cn/api/" target="_blank" rel="noopener">Hexo API</a><br><a href="http://chaoo.oschina.io/" target="_blank" rel="noopener">BlueLake author</a><br><a href="http://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html" target="_blank" rel="noopener">BlueLake config</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo docs&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hexo.io/zh-cn/api/&quot; target=&quot;_blank
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://lianruhe.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hexo" scheme="https://lianruhe.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lianruhe.github.io/2017/11/01/hello-world/"/>
    <id>https://lianruhe.github.io/2017/11/01/hello-world/</id>
    <published>2017-11-01T07:53:31.000Z</published>
    <updated>2017-11-01T07:53:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
